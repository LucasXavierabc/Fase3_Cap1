from flask import Flask, request, jsonify
import oracledb
import pandas as pd
from datetime import datetime
import json
import time

app = Flask(__name__)

# Configurações do banco
ORACLE_CONFIG = {
    'dsn': 'oracle.fiap.com.br:1521/orcl',
    'user': '********',
    'password': '******'
}

TABELA = 'irrigacao_dados'

def conectar_oracle():
    """Conecta ao Oracle com retry"""
    for tentativa in range(3):
        try:
            conn = oracledb.connect(
                user=ORACLE_CONFIG['user'],
                password=ORACLE_CONFIG['password'],
                dsn=ORACLE_CONFIG['dsn']
            )
            return conn
        except Exception as e:
            if tentativa == 2:
                raise e
            time.sleep(1)
    return None

def criar_tabela_se_nao_existir():
    # verificação e criação da tabela de dados
    try:
        conn = conectar_oracle()
        cur = conn.cursor()
        
        # Verifica se tabela existe
        cur.execute("""
            SELECT COUNT(*) FROM user_tables WHERE table_name = UPPER(:1)
        """, (TABELA,))
        
        if cur.fetchone()[0] == 0:
            # Cria a tabela
            cur.execute(f"""
                CREATE TABLE {TABELA} (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    humidity NUMBER(5,2),
                    temperature NUMBER(5,2),
                    ph NUMBER(4,2),
                    fosforo_presente NUMBER(1),
                    potassio_presente NUMBER(1),
                    bomba_status VARCHAR2(20),
                    data_coleta TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            conn.commit()
            print(f"Tabela {TABELA} criada com sucesso")
        
        cur.close()
        conn.close()
        return True
    except Exception as e:
        print(f"Erro ao verificar/criar tabela: {e}")
        return False

# Inicializa a tabela se não existir
criar_tabela_se_nao_existir()

@app.route('/health', methods=['GET'])
def health_check():
    # Endpoint de verificação de saúde da API
    try:
        conn = conectar_oracle()
        if conn:
            conn.close()
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.now().isoformat(),
                'database': 'connected'
            }), 200
    except:
        return jsonify({
            'status': 'unhealthy',
            'timestamp': datetime.now().isoformat(),
            'database': 'disconnected'
        }), 503

@app.route('/dados', methods=['POST'])
def inserir_dado():
    # Endpoint para inserir um único dado
    try:
        data = request.get_json()
        
        # Validação dos campos
        campos_obrigatorios = ['humidity', 'temperature', 'ph', 'fosforo_presente', 'potassio_presente', 'bomba_status']
        for campo in campos_obrigatorios:
            if campo not in data:
                return jsonify({'erro': f'Campo {campo} é obrigatório'}), 400
        
        conn = conectar_oracle()
        cur = conn.cursor()
        
        cur.execute(f"""
            INSERT INTO {TABELA} (humidity, temperature, ph, fosforo_presente, potassio_presente, bomba_status)
            VALUES (:1, :2, :3, :4, :5, :6)
        """, (
            float(data['humidity']),
            float(data['temperature']),
            float(data['ph']),
            int(data['fosforo_presente']),
            int(data['potassio_presente']),
            str(data['bomba_status']).upper()
        ))
        
        conn.commit()
        cur.close()
        conn.close()
        
        return jsonify({
            'mensagem': 'Dados inseridos com sucesso',
            'timestamp': datetime.now().isoformat()
        }), 201
        
    except Exception as e:
        return jsonify({'erro': str(e)}), 500

@app.route('/dados/batch', methods=['POST'])
def inserir_multiplos_dados():
    # Endpoint para inserir múltiplos dados
    try:
        data = request.get_json()
        
        if not isinstance(data, list):
            return jsonify({'erro': 'Dados devem ser uma lista'}), 400
        
        if not data:
            return jsonify({'erro': 'Lista não pode estar vazia'}), 400
        
        conn = conectar_oracle()
        cur = conn.cursor()
        
        sucessos = 0
        erros = []
        
        for i, registro in enumerate(data):
            try:
                cur.execute(f"""
                    INSERT INTO {TABELA} (humidity, temperature, ph, fosforo_presente, potassio_presente, bomba_status)
                    VALUES (:1, :2, :3, :4, :5, :6)
                """, (
                    float(registro['humidity']),
                    float(registro['temperature']),
                    float(registro['ph']),
                    int(registro['fosforo_presente']),
                    int(registro['potassio_presente']),
                    str(registro['bomba_status']).upper()
                ))
                sucessos += 1
            except Exception as e:
                erros.append(f'Linha {i+1}: {str(e)}')
        
        conn.commit()
        cur.close()
        conn.close()
        
        return jsonify({
            'mensagem': f'{sucessos} registros inseridos com sucesso',
            'sucessos': sucessos,
            'erros': len(erros),
            'detalhes_erros': erros[:5],  # Mostrar apenas os primeiros 5 erros
            'timestamp': datetime.now().isoformat()
        }), 201
        
    except Exception as e:
        return jsonify({'erro': str(e)}), 500

@app.route('/dados/consulta', methods=['GET'])
def consultar_dados():
    # Consulta dados
    try:
        # Parâmetros de consulta
        limite = request.args.get('limite', 10000, type=int)
        offset = request.args.get('offset', 0, type=int)
        data_inicio = request.args.get('data_inicio')
        data_fim = request.args.get('data_fim')
        
        conn = conectar_oracle()
        cur = conn.cursor()
        
        # Query base
        query = f"SELECT * FROM {TABELA} WHERE 1=1"
        params = []
        
        # Filtro por data
        if data_inicio:
            query += " AND data_coleta >= :data_inicio"
            params.append(datetime.fromisoformat(data_inicio.replace('Z', '+00:00')))
        
        if data_fim:
            query += " AND data_coleta <= :data_fim"
            params.append(datetime.fromisoformat(data_fim.replace('Z', '+00:00')))
        
        query += " ORDER BY data_coleta DESC"
        query += f" OFFSET {offset} ROWS FETCH NEXT {limite} ROWS ONLY"
        
        cur.execute(query, params)
        colunas = [desc[0] for desc in cur.description]
        resultados = cur.fetchall()
        
        # Transforma pra json
        dados = []
        for linha in resultados:
            registro = {}
            for i, valor in enumerate(linha):
                if isinstance(valor, datetime):
                    registro[colunas[i]] = valor.isoformat()
                else:
                    registro[colunas[i]] = valor
            dados.append(registro)
        
        cur.close()
        conn.close()
        
        return jsonify({
            'dados': dados,
            'total_retornado': len(dados),
            'offset': offset,
            'limite': limite
        }), 200
        
    except Exception as e:
        return jsonify({'erro': str(e)}), 500

@app.route('/dados/estatisticas', methods=['GET'])
def obter_estatisticas():
    # Endpoint para obter estatísticas dos dados
    try:
        conn = conectar_oracle()
        cur = conn.cursor()
        
        # Estatísticas gerais
        cur.execute(f"""
            SELECT 
                COUNT(*) as total_registros,
                AVG(humidity) as media_humidity,
                AVG(temperature) as media_temperature,
                AVG(ph) as media_ph,
                SUM(CASE WHEN bomba_status = 'LIGADA' THEN 1 ELSE 0 END) as bombas_ligadas,
                MAX(data_coleta) as ultima_coleta
            FROM {TABELA}
        """)
        
        resultado = cur.fetchone()
        
        estatisticas = {
            'total_registros': resultado[0],
            'media_humidity': round(resultado[1], 2) if resultado[1] else 0,
            'media_temperature': round(resultado[2], 2) if resultado[2] else 0,
            'media_ph': round(resultado[3], 2) if resultado[3] else 0,
            'bombas_ligadas': resultado[4],
            'ultima_coleta': resultado[5].isoformat() if resultado[5] else None
        }
        
        cur.close()
        conn.close()
        
        return jsonify(estatisticas), 200
        
    except Exception as e:
        return jsonify({'erro': str(e)}), 500

if __name__ == '__main__':
    print("Iniciando API de Irrigação...")
    print("Endpoints disponíveis:")
    print("- GET /health - Status da API")
    print("- POST /dados - Inserir um dado")
    print("- POST /dados/batch - Inserir múltiplos dados")
    print("- GET /dados/consulta - Consultar dados")
    print("- GET /dados/estatisticas - Estatísticas dos dados")
    
    app.run(debug=True, host='0.0.0.0', port=5000)